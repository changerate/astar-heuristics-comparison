checkout cluade's optimized code.
consider implementing heapq again with this in the Node class:
    def __lt__(self, other):
        # For heapq comparison - compare by f() value first, then by g value
        if self.f() != other.f():
            return self.f() < other.f()
        return self.g > other.g  # Prefer higher g (deeper) for tie-breaking

The priority queue of things to move 

(0, '3')
(0, '4')
(0, '6')
(0, '7')
(1, '1')
(1, '8')
(1, '5')
(1, '2')
(4, '0')


